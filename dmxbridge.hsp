#include "hspext.as"
#define global DMXBRIDGE_DO_LOGMES 0

#module mod_dmxbridge
	#deffunc dmx_initialize int comport_number, int baudrate
		dim cnum
		cnum=comport_number
		dim br
		br=baudrate
		dim cs
		dim param,256
		dim status
		comopen@ cnum,"baud="+br+" parity=N data=8 stop=1"
		status = stat
		#if DMXBRIDGE_DO_LOGMES = 1
			logmes "[DMXBRIDGE] ComOpen(COM"+cnum+") : "+stat
		#endif
		dim monitor_avail
		monitor_avail = 0
		dim monitor_wid
		monitor_wid = 28
		dim monitor_chlist, 256
		monitor_chlist(0) = 1, 2, 3, -1, 65, 66, 67, 68, 69, -1, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111
		dim monitor_chcol, 256
		monitor_chcol(0) = "r", "g", "b", "", "w", "r", "g", "b", "w", "", "r", "g", "b", "r", "g", "b", "r", "g", "b", "r", "g", "b", "w"
		dim monitor_xsize
		monitor_xsize = 24
		dim monitor_ysize
		monitor_ysize = 256
		dim monitor_count
		monitor_count = 128
	return status
	#deffunc dmx_monitor int avail_val
		if monitor_avail != avail_val{
			if avail_val = 1{
				screen monitor_wid, 1280, monitor_ysize+16, SCREEN_TOOL+SCREEN_FIXEDSIZE, ginfo_wx2 + 32, ginfo_wy1
				if status = 0{
					title "raw monitor(COM " + cnum + ")"
				}
				if status = 1{
					title "raw monitor(FAIL)"
				}
			}
			if avail_val = 0{
				screen monitor_wid, 1280, monitor_ysize+16, SCREEN_HIDE
			}
		}
		monitor_avail = avail_val
	return
	#deffunc dmx_monitor_refresh
		if monitor_avail = 1{
			gsel monitor_wid
			redraw 0
			rgbcolor $000000
			boxf
			font msgothic, 12
			repeat length(monitor_chlist)
				if monitor_chlist(cnt) = 0{
					width cnt * 24, monitor_ysize
					monitor_count = cnt
					break
				}
				if monitor_chlist(cnt) = -1{
					continue
				}
				pos monitor_xsize * cnt + 4, 12
				rgbcolor $AAAAAA
				mes monitor_chlist(cnt)

				rgbcolor $444444
				line monitor_xsize * cnt + 4 + 6, 24, monitor_xsize * cnt + 4 + 6, monitor_ysize - 24
				
				l = (monitor_ysize - 48) * param(monitor_chlist(cnt)) / 255
				if monitor_chcol(cnt) = "w"{
					rgbcolor $AAAAAA
				}
				if monitor_chcol(cnt) = "r"{
					rgbcolor $AA0000
				}
				if monitor_chcol(cnt) = "g"{
					rgbcolor $00AA00
				}
				if monitor_chcol(cnt) = "b"{
					rgbcolor $0000AA
				}
				line monitor_xsize * cnt + 4 + 6, monitor_ysize - 24 - l, monitor_xsize * cnt + 4 + 6, monitor_ysize - 24
				circle monitor_xsize * cnt + 4 + 6 - 2, monitor_ysize - 24 - l - 2, monitor_xsize * cnt + 4 + 6 + 3, monitor_ysize - 24 - l + 3, 1
				
				pos monitor_xsize * cnt + 4, monitor_ysize - 18
				rgbcolor $AAAAAA
				mes param(monitor_chlist(cnt))
			loop
			redraw 1
		}
	return
	#deffunc dmx_setparam int channel, int data
		if channel<0 | channel>255{
			return 1
		}
		if data<0 | data>255{
			return 1
		}
		param(channel)=data
		cs=( ((address+data)& %11110000)/16 + (address+data)& %00001111 ) \16
		computc@ %00010000+cs
		computc@ channel
		computc@ data
		#if DMXBRIDGE_DO_LOGMES = 1
			logmes strf("[DMXBRIDGE] Send Channel=%3d, Data=%3d",channel,data)
		#endif
	return 0
	#deffunc dmx_setparamByField var field_text
		notesel field_text
		sdim fline,256
		dim fch
		dim fparam
		repeat notemax
			noteget fline, cnt
			split fline, " ", fch, fparam
			if fch=0:continue
			dmx_setparam int(fch), int(fparam)
		loop
	return 0
	#define global dmx_setcolor(%1, %2) dmx_setparam %1,(%2)/65536 %c dmx_setparam %1+1,(%2)\65536/256 %c dmx_setparam %1+2,(%2)\256
	#define global ctype dmx_param(%1) (param@mod_dmxbridge(%1))
	#deffunc dmx_close
		comclose@
		#if DMXBRIDGE_DO_LOGMES = 1
			logmes "[DMXBRIDGE] ComClose(COM"+cnum+") : "+stat
		#endif
	return 0
#global
/******************************************************************************************************************************
#module mod_dmxbridge

	#deffunc dmx_initialize int comport_number, int baudrate
	#deffunc dmx_setparam int channel, int data
	#deffunc dmx_setparamByField var field_text
	#deffunc dmx_close

	#define global dmx_setcolor(%1, %2) dmx_setparam %1,(%2)/65536 %c dmx_setparam %1+1,(%2)\65536/256 %c dmx_setparam %1+2,(%2)\256
	#define global ctype dmx_param(%1) (param@mod_dmxbridge(%1))

******************************************************************************************************************************/